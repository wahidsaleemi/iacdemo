{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vNetName": {
            "type": "string",
            "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "vNetAddressPrefixes": {
            "type": "array",
            "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
            }
        },
        "subnets": {
            "type": "array",
            "minLength": 1,
            "metadata": {
                "description": "Required. An Array of subnets to deploy to the Virual Network."
            }
        },
        "dnsServers": {
            "type": "array",
            "defaultValue": [
                "172.21.3.10",
                "172.21.3.11"
            ],
            "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock Virtual Network from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        }
    },
    "variables": {
        "subnetNamesToOutput": {
            "copy": [
                {
                    "name": "subnetNamesOutput",
                    "count": "[length(parameters('subnets'))]",
                    "input": "[parameters('subnets')[copyIndex('subnetNamesOutput')].Name]"
                }
            ]
        },
        "dnsServers": {
            "dnsServers": "[array(parameters('dnsServers'))]"
        }
    },
    "resources": [
        {
            "name": "sz-server-default-p-nsg-01",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "DenyVnetInBound",
                        "properties": {
                            "description": "Deny all traffic from Vnet. Replace this NSG with one for the app.",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Deny",
                            "priority": 4000,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-08-01",
            "name": "[parameters('vNetName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'sz-server-default-p-nsg-01')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                },
                "dhcpOptions": "[if(empty(parameters('dnsServers')), json('null'), variables('dnsServers'))]",
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                            "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                            "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupName'), if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), '\"}'))), json('null'))]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableName'), if(empty(parameters('subnets')[copyIndex('subnets')].routeTableName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', parameters('subnets')[copyIndex('subnets')].routeTableName), '\"}'))), json('null'))]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), if(empty(parameters('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'))]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), if(empty(parameters('subnets')[copyIndex('subnets')].delegations), json('null'), parameters('subnets')[copyIndex('subnets')].delegations), json('null'))]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayName'), if(empty(parameters('subnets')[copyIndex('subnets')].natGatewayName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/natGateways', parameters('subnets')[copyIndex('subnets')].natGatewayName), '\"}'))), json('null'))]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), if(empty(parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies), json('null'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies), json('null'))]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), if(empty(parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies), json('null'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies), json('null'))]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "apiVersion": "2016-09-01",
                    "type": "providers/locks",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/virtualNetworkDoNotDelete",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                    ],
                    "comments": "Resource lock on virtual network",
                    "properties": {
                        "level": "CannotDelete"
                    }
                }
            ]
        }
    ],
    "outputs": {
        "vNetResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Virtual Network was created in."
            }
        },
        "vNetName": {
            "type": "string",
            "value": "[parameters('vNetName')]",
            "metadata": {
                "description": "The name of the Virtual Network deployed."
            }
        },
        "subnetNames": {
            "type": "array",
            "value": "[variables('subnetNamesToOutput').subnetNamesOutput]",
            "metadata": {
                "description": "The Names of the Subnets deployed to the Virtual Network."
            }
        }
    }
}